import { uploadToPinataFile, uploadToPinataJSON } from "../ipfs";

function clampTo64(n: number, min = 256, max = 2048) {
  const clamped = Math.max(min, Math.min(max, n || 0));
  return Math.round(clamped / 64) * 64;
}

type GenOpts = {
  prompt: string;
  model?: string;
  width?: number;
  height?: number;
};

async function makeMockImageBlob(prompt: string, w: number, h: number): Promise<Blob> {
  const svg = `
  <svg xmlns="http://www.w3.org/2000/svg" width="${w}" height="${h}">
    <defs>
      <linearGradient id="g" x1="0" x2="1" y1="0" y2="1">
        <stop offset="0%" stop-color="#34d399"/>
        <stop offset="100%" stop-color="#10b981"/>
      </linearGradient>
    </defs>
    <rect width="100%" height="100%" fill="url(#g)"/>
    <text x="50%" y="50%" font-family="system-ui, sans-serif" font-size="${Math.max(20, Math.floor(w/18))}"
      fill="#0b1020" text-anchor="middle" dominant-baseline="middle">
      MOCK: ${prompt}
    </text>
  </svg>`;
  return new Blob([svg], { type: "image/svg+xml" });
}

export async function generateImagesStability({ prompt, model, width, height }: GenOpts) {
  const apiKey = process.env.STABILITY_API_KEY;
  const mode = (process.env.GENERATION_MODE || "mock").toLowerCase();
  const mdl = model || process.env.STABILITY_DEFAULT_MODEL || "sd3.5-medium";
  const w = clampTo64(Number(width || process.env.IMAGE_WIDTH || 512));
  const h = clampTo64(Number(height || process.env.IMAGE_HEIGHT || 512));
  const url = "https://api.stability.ai/v2beta/stable-image/generate/core";

  const useMock = mode !== "stability" || !apiKey || process.env.AI_MOCK === "1" || process.env.AI_MOCK === "true";

  async function pinAndReturn(fileBlob: Blob) {
    const ab = await fileBlob.arrayBuffer();
    const buf = Buffer.from(ab);
    const fileName = `ai-${Date.now()}.${fileBlob.type.includes("svg") ? "svg" : "png"}`;
    const imageCid = await uploadToPinataFile(buf, fileName);
    const metadata = {
      name: "AI Image",
      description: `Generated ${useMock ? "in MOCK mode" : "by Stability"} (model=${mdl}) — prompt: "${prompt}"`,
      image: `ipfs://${imageCid}`,
      attributes: [
        { trait_type: "model", value: mdl },
        { trait_type: "width", value: w },
        { trait_type: "height", value: h },
        { trait_type: "mock", value: useMock ? "true" : "false" },
      ],
    };
    const metadataCid = await uploadToPinataJSON(metadata);
    return [
      {
        imageCid,
        metadataCid,
        imageUri: `ipfs://${imageCid}`,
        metadataUri: `ipfs://${metadataCid}`,
      },
    ];
  }

  // Mode mock direct si activé ou pas de clé
  if (useMock || !apiKey) {
    const blob = await makeMockImageBlob(prompt, w, h);
    return pinAndReturn(blob);
  }

  // Appel Stability (réel). Si 402 ⇒ fallback mock si AI_MOCK=1.
  const form = new FormData();
  form.append("prompt", prompt);
  form.append("model", mdl);
  form.append("width", String(w));
  form.append("height", String(h));
  form.append("output_format", "png");
  form.append("seed", String(Math.floor(Math.random() * 10_000_000)));

  const res = await fetch(url, {
    method: "POST",
    headers: {
      Authorization: `Bearer ${apiKey}`,
      Accept: "image/*",
    },
    body: form as any,
  });

  if (!res.ok) {
    const txt = await res.text().catch(() => "");
    if (res.status === 402 && (process.env.AI_MOCK === "1" || process.env.AI_MOCK === "true")) {
      const blob = await makeMockImageBlob(prompt, w, h);
      return pinAndReturn(blob);
    }
    throw new Error(`Stability error ${res.status}: ${txt || "unknown"}`);
  }

  const ab = await res.arrayBuffer();
  const buf = Buffer.from(ab);
  const imageCid = await uploadToPinataFile(buf, `ai-${Date.now()}.png`);
  const metadata = {
    name: "AI Image",
    description: `Generated by Stability (model=${mdl}) — prompt: "${prompt}"`,
    image: `ipfs://${imageCid}`,
    attributes: [
      { trait_type: "model", value: mdl },
      { trait_type: "width", value: w },
      { trait_type: "height", value: h },
      { trait_type: "mock", value: "false" },
    ],
  };
  const metadataCid = await uploadToPinataJSON(metadata);
  return [
    {
      imageCid,
      metadataCid,
      imageUri: `ipfs://${imageCid}`,
      metadataUri: `ipfs://${metadataCid}`,
    },
  ];
}


